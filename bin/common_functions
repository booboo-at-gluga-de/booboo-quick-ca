#!/usr/bin/env bash

# BooBoo Quick CA
# Copyright (C) 2017, Bernd Stroessenreuther <booboo@gluga.de>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


# 2017-06-01 booboo:
# defining colors, functions, ... used by more than one of the
# other scripts in this directory

# .-- color definitions ----------------------------------------------------.
HEADLINE_COLOR='\033[1;34m'
RED='\033[1;31m'
GREEN='\033[1;32m'
ORANGE='\033[0;33m'
NO_COLOR='\033[0m'

#.
function do_not_run_as_root { # .------------------------------------------.
    if [[ $EUID -eq 0 ]]; then
        echo
        echo You should not run your CA as root user.
        echo Better create a separate unprivileged user account especially for your CA.
        echo
        exit 1
    fi
}

#.
function logical_symlink { # .---------------------------------------------.
    LINK_DEST=$1
    LINK_SOURCE=$2

    BASENAME_LINK_DEST=$(basename $LINK_DEST)
    BASENAME_LINK_SOURCE=$(basename $LINK_SOURCE)
    DIRNAME_LINK_DEST=$(dirname $LINK_DEST)
    DIRNAME_LINK_SOURCE=$(dirname $LINK_SOURCE)

    if [[ -L $LINK_SOURCE ]]; then
        rm -f $LINK_SOURCE
    fi

    if [[ $DIRNAME_LINK_DEST = $DIRNAME_LINK_SOURCE ]]; then
        echo ":: in $DIRNAME_LINK_DEST symlinking $BASENAME_LINK_SOURCE -> $BASENAME_LINK_DEST"
        cd $DIRNAME_LINK_DEST
        ln -s $BASENAME_LINK_DEST $BASENAME_LINK_SOURCE
        cd - >/dev/null
    else
        echo ":: symlinking $LINK_SOURCE -> $LINK_DEST"
        ln -s $LINK_DEST $LINK_SOURCE
    fi
}

#.
function display_rc { # .--------------------------------------------------.
    RC=$1
    EXIT_AFTER_DISPLAY=$2

    if [[ $RC -eq 0 ]]; then
        echo -e :: Result: ${GREEN}Good${NO_COLOR}
    else
        echo -e :: Result: ${RED}Problem!${NO_COLOR}

        if [[ $EXIT_AFTER_DISPLAY -ne 0 ]]; then
            exit 1
        fi
    fi
}

#.
function create_crl_root_ca { # .------------------------------------------.
    if [[ ! -z "$ROOT_CA_CRL_DISTRIBUTION_POINTS" ]]; then
        echo ::
        echo -e :: ${HEADLINE_COLOR}Creating a Certificate Revocation List \(CRL\) for the Root CA...${NO_COLOR}
        echo ::

        RC=255
        while [[ $RC -ne 0 ]]; do
            openssl ca -config $ROOT_CA_OPENSSL_CNF_FILE -gencrl -out $ROOT_CA_CRL_FILE
            RC=$?
            [[ $RC -ne 0 ]] && echo -e :: ${ORANGE}WARNING: This did not work. Retrying...${NO_COLOR}
        done

        echo :: You now have:
        openssl crl  -text -noout -in $ROOT_CA_CRL_FILE
        chmod 644 $ROOT_CA_CRL_FILE
    else
        echo ::
        echo -e :: ${HEADLINE_COLOR}No Certificate Revocation List \(CRL\) will be created for the Root CA${NO_COLOR}
        echo :: because ROOT_CA_CRL_DISTRIBUTION_POINTS is not set in
        echo :: $QUICK_CA_CFG_FILE
        echo ::
    fi
}

#.
function create_crl_issuing_ca { # .---------------------------------------.
    if [[ $SEPARATE_ISSUING_CA != "yes" ]]; then
        return 0
    fi

    if [[ ! -z "$ISSUING_CA_CRL_DISTRIBUTION_POINTS" ]]; then
        echo ::
        echo -e :: ${HEADLINE_COLOR}Creating a Certificate Revocation List \(CRL\) for the Issuing CA...${NO_COLOR}
        echo ::

        RC=255
        while [[ $RC -ne 0 ]]; do
            openssl ca -config $ISSUING_CA_OPENSSL_CNF_FILE -gencrl -out $ISSUING_CA_CRL_FILE
            RC=$?
            [[ $RC -ne 0 ]] && echo -e :: ${ORANGE}WARNING: This did not work. Retrying...${NO_COLOR}
        done

        chmod 644 $CA_CHAIN_PLUS_CRL_FILE_FULL
        cat $ISSUING_CA_CERT_FILE $ROOT_CA_CERT_FILE $ISSUING_CA_CRL_FILE $ROOT_CA_CRL_FILE > $CA_CHAIN_PLUS_CRL_FILE_FULL
        chmod 444 $CA_CHAIN_PLUS_CRL_FILE_FULL
        logical_symlink $CA_CHAIN_PLUS_CRL_FILE_FULL $CA_CHAIN_PLUS_CRL_FILE
        echo ::
        echo :: Created CA chain file including CRLs: $CA_CHAIN_PLUS_CRL_FILE_FULL
        echo ::

        echo :: You now have:
        openssl crl  -text -noout -in $ISSUING_CA_CRL_FILE
        chmod 644 $ISSUING_CA_CRL_FILE
    else
        echo ::
        echo -e :: ${HEADLINE_COLOR}No Certificate Revocation List \(CRL\) will be created for the Issuing CA${NO_COLOR}
        echo :: because ISSUING_CA_CRL_DISTRIBUTION_POINTS is not set in
        echo :: $QUICK_CA_CFG_FILE
        echo ::

        logical_symlink $CA_CHAIN_FILE $CA_CHAIN_PLUS_CRL_FILE
    fi
}

#.
function check_crl_validity { # .------------------------------------------.
    # 1st param needs to specify, which CA's CRL to check
    if [[ $1 = "root_ca" ]]; then
        CRL_NAME="Root CA"
        CRL_DISTRIBUTION_POINTS=$ROOT_CA_CRL_DISTRIBUTION_POINTS
        CRL_FILE=$ROOT_CA_CRL_FILE
    elif [[ $1 = "issuing_ca" ]]; then
        if [[ $SEPARATE_ISSUING_CA != "yes" ]]; then
            return 0
        fi
        CRL_NAME="Issuing CA"
        CRL_DISTRIBUTION_POINTS=$ISSUING_CA_CRL_DISTRIBUTION_POINTS
        CRL_FILE=$ISSUING_CA_CRL_FILE
    else
        echo -e :: ${RED}Unknown parameter passed to function check_crl_validity: $1${NO_COLOR}
        return 1
    fi

    # 2nd param may be "-q" for quiet
    QUIET=0
    if [[ $2 = "-q" ]]; then
        QUIET=1
    fi

    NOW=$(date +%s)

    # check the given CRL
    if [[ ! -z "$CRL_DISTRIBUTION_POINTS" ]]; then
        echo ::
        echo -e :: ${HEADLINE_COLOR}Checking validity priod of the CRL for the $CRL_NAME...${NO_COLOR}
        if [[ ! -f $CRL_FILE ]]; then
            echo -e :: ${RED}Error: File $CRL_FILE does not exist!${NO_COLOR}
        else
            VALID_UNTIL=$(openssl crl -text -noout -in $CRL_FILE | grep "Next Update:" | sed -e "s/.*Next Update: //")
            VALID_UNTIL_EPOCH=$(date --date="$VALID_UNTIL" +%s)
            REMAINING_VALIDITY=$(($VALID_UNTIL_EPOCH - $NOW))

            if [[ $REMAINING_VALIDITY -lt 0 ]]; then
                echo -e :: ${RED}CRL expired! Was valid until $VALID_UNTIL${NO_COLOR}
                echo -e :: ${RED}Please run renew_crl.sh immediatelly!${NO_COLOR}
            elif [[ $REMAINING_VALIDITY -lt 1209600 ]]; then      # less than 14 days
                echo -e :: ${ORANGE}CRL will expire soon! Valid until $VALID_UNTIL${NO_COLOR}
                echo -e :: ${ORANGE}Please run renew_crl.sh soon!${NO_COLOR}
            else
                echo -e :: ${GREEN}CRL ok! Valid until $VALID_UNTIL${NO_COLOR}
            fi
        fi
    else
        if [[ $QUIET -eq 0 ]]; then
            echo ::
            echo -e :: ${HEADLINE_COLOR}You do not use a CRL for the $CRL_NAME${NO_COLOR}
            echo -e :: ${GREEN}Nothing to check!${NO_COLOR}
        fi
    fi
}

#.
